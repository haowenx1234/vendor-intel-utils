From b6c06457aacdf5177c9fd924440ef9a30c0025c2 Mon Sep 17 00:00:00 2001
From: Xiao HaowenX <haowenx.xiao@intel.com>
Date: Mon, 29 Nov 2021 09:25:25 +0800
Subject: [PATCH] fix static bound to dynamically bound

Previously connectors are bound to crtc in init stage while
connector counter and crtc counter are not matched then caused some displays
can't display when hotplug monitors into unbound connectors. Change to bind
connector and crtc dynamically when detect connector changed to CONNECTED
state in hotplug handling

Tracked-On:OAM-99492
Signed-off-by: Xiao HaowenX <haowenx.xiao@intel.com>
---
 DrmHwcTwo.cpp         | 39 ++++++++++++++++++++++++++++++++++-----
 DrmHwcTwo.h           |  1 +
 drm/DrmDevice.cpp     | 43 +++++--------------------------------------
 drm/DrmDevice.h       |  9 ++++++---
 drm/ResourceManager.h |  3 +++
 5 files changed, 49 insertions(+), 46 deletions(-)

diff --git a/DrmHwcTwo.cpp b/DrmHwcTwo.cpp
index 194b11e..bb474eb 100644
--- a/DrmHwcTwo.cpp
+++ b/DrmHwcTwo.cpp
@@ -1202,23 +1202,49 @@ void DrmHwcTwo::HandleInitialHotplugState(DrmDevice *drmDevice) {
   }
 }
 
+int DrmHwcTwo::DynamicallyBound(DrmConnector *mconn,DrmDevice *mdrm){
+	int curr_num_display = resource_manager_.getDisplayCount();
+	mconn->set_display(curr_num_display);
+	if (mdrm->max_pipe_count-- <= 0)
+      return -1;
+	int ret_ = mdrm->CreateDisplayPipe(mconn);
+	if (ret_) {
+        ALOGE("Failed CreateDisplayPipe %d with %d", mconn->id(), ret_);
+        return -1;
+	}
+	mdrm->setDisplay_(curr_num_display);
+	resource_manager_.addDisplayCount();
+	if (!mdrm->AttachWriteback(mconn)) {
+      	ALOGI("Display %d has writeback attach to it", mconn->display());
+	}
+	HWC2::Error ret = HWC2::Error::None;
+	ret = CreateDisplay(curr_num_display, HWC2::DisplayType::Physical);
+	if (ret != HWC2::Error::None) {
+		ALOGE("Failed to create display %d with error %d", curr_num_display, ret);
+		return -1;
+	}
+		
+	return curr_num_display;
+}
+
 void DrmHwcTwo::DrmHotplugHandler::HandleEvent(uint64_t timestamp_us) {
   for (const auto &conn : drm_->connectors()) {
     drmModeConnection old_state = conn->state();
     drmModeConnection cur_state = conn->UpdateModes()
                                       ? DRM_MODE_UNKNOWNCONNECTION
                                       : conn->state();
-    if (conn->display() == -1)
-      continue;
     if (cur_state == old_state)
       continue;
 
-    ALOGI("%s event @%" PRIu64 " for connector %u on display %d",
-          cur_state == DRM_MODE_CONNECTED ? "Plug" : "Unplug", timestamp_us,
-          conn->id(), conn->display());
+   
 
     int display_id = conn->display();
     if (cur_state == DRM_MODE_CONNECTED) {
+	  if(display_id == -1){
+	  	if((display_id = hwc2_->DynamicallyBound(conn.get(),drm_)) == -1){
+			continue;
+	  	}
+	  }
       auto &display = hwc2_->displays_.at(display_id);
       display.ChosePreferredConfig();
       display.SetPowerMode(static_cast<int32_t>(HWC2::PowerMode::On));
@@ -1227,6 +1253,9 @@ void DrmHwcTwo::DrmHotplugHandler::HandleEvent(uint64_t timestamp_us) {
       display.ClearDisplay();
       display.SetPowerMode(static_cast<int32_t>(HWC2::PowerMode::Off));
     }
+	ALOGI("%s event @%" PRIu64 " for connector %u on display %d",
+			 cur_state == DRM_MODE_CONNECTED ? "Plug" : "Unplug", timestamp_us,
+			 conn->id(), conn->display());
 
     if (display_id != 0 || (display_id == 0 && cur_state == DRM_MODE_CONNECTED))
       hwc2_->HandleDisplayHotplug(display_id, cur_state);
diff --git a/DrmHwcTwo.h b/DrmHwcTwo.h
index 0c2edef..911c38b 100644
--- a/DrmHwcTwo.h
+++ b/DrmHwcTwo.h
@@ -418,6 +418,7 @@ class DrmHwcTwo : public hwc2_device_t {
   void HandleDisplayHotplug(hwc2_display_t displayid, int state);
   void HandleInitialHotplugState(DrmDevice *drmDevice);
 
+  int DynamicallyBound(DrmConnector *conn,DrmDevice *drm);
   ResourceManager resource_manager_;
   std::map<hwc2_display_t, HwcDisplay> displays_;
 
diff --git a/drm/DrmDevice.cpp b/drm/DrmDevice.cpp
index f47aa72..d7bc13a 100644
--- a/drm/DrmDevice.cpp
+++ b/drm/DrmDevice.cpp
@@ -302,23 +302,7 @@ std::tuple<int, int> DrmDevice::Init(const char *path, int num_displays) {
     ++num_displays;
   }
 
-  int max_pipe_count = std::min(res->count_crtcs, res->count_connectors);
-  // If no priority display were found then pick first available as primary and
-  // for the others assign consecutive display_numbers.
-  for (auto &conn : connectors_) {
-    if (conn->external() || conn->internal()) {
-      if (!found_primary) {
-        conn->set_display(num_displays);
-        displays_[num_displays] = num_displays;
-        found_primary = true;
-        ++num_displays;
-      } else if (conn->display() < 0 && num_displays < max_pipe_count) {
-        conn->set_display(num_displays);
-        displays_[num_displays] = num_displays;
-        ++num_displays;
-      }
-    }
-  }
+  max_pipe_count = std::min(res->count_crtcs, res->count_connectors);
 
   if (res)
     drmModeFreeResources(res);
@@ -382,27 +366,6 @@ std::tuple<int, int> DrmDevice::Init(const char *path, int num_displays) {
     }
   }
 
-  for (auto &conn : connectors_) {
-    auto it = std::find_if(std::begin(primary_candidates),
-                           std::end(primary_candidates),
-                           [&conn](const DrmConnector *conn_pri) {
-                             return conn->id() == conn_pri->id();
-                           });
-    if (it != std::end(primary_candidates))
-      continue;
-
-    if (max_pipe_count-- <= 0)
-      break;
-
-    ret = CreateDisplayPipe(conn.get());
-    if (ret) {
-      ALOGE("Failed CreateDisplayPipe %d with %d", conn->id(), ret);
-      return std::make_tuple(ret, 0);
-    }
-    if (!AttachWriteback(conn.get())) {
-      ALOGI("Display %d has writeback attach to it", conn->display());
-    }
-  }
   return std::make_tuple(ret, displays_.size());
 }
 
@@ -410,6 +373,10 @@ bool DrmDevice::HandlesDisplay(int display) const {
   return displays_.find(display) != displays_.end();
 }
 
+void DrmDevice::setDisplay_(int display) {
+	displays_[display] = display;
+}
+
 DrmConnector *DrmDevice::GetConnectorForDisplay(int display) const {
   for (const auto &conn : connectors_) {
     if (conn->display() == display)
diff --git a/drm/DrmDevice.h b/drm/DrmDevice.h
index a84d1f9..8700519 100644
--- a/drm/DrmDevice.h
+++ b/drm/DrmDevice.h
@@ -49,7 +49,6 @@ class DrmDevice {
   const std::vector<std::unique_ptr<DrmConnector>> &connectors() const {
     return connectors_;
   }
-
   const std::vector<std::unique_ptr<DrmPlane>> &planes() const {
     return planes_;
   }
@@ -68,6 +67,9 @@ class DrmDevice {
   DrmCrtc *GetCrtcForDisplay(int display) const;
   DrmPlane *GetPlane(uint32_t id) const;
   DrmEventListener *event_listener();
+  int AttachWriteback(DrmConnector *display_conn);
+  int CreateDisplayPipe(DrmConnector *connector);
+  int max_pipe_count;
 
   int GetPlaneProperty(const DrmPlane &plane, const char *prop_name,
                        DrmProperty *property);
@@ -85,6 +87,7 @@ class DrmDevice {
   int CreatePropertyBlob(void *data, size_t length, uint32_t *blob_id) const;
   int DestroyPropertyBlob(uint32_t blob_id) const;
   bool HandlesDisplay(int display) const;
+  void setDisplay_(int display);
   void RegisterHotplugHandler(DrmEventHandler *handler) {
     event_listener_.RegisterHotplugHandler(handler);
   }
@@ -102,11 +105,11 @@ class DrmDevice {
   int GetProperty(uint32_t obj_id, uint32_t obj_type, const char *prop_name,
                   DrmProperty *property) const;
 
-  int CreateDisplayPipe(DrmConnector *connector);
-  int AttachWriteback(DrmConnector *display_conn);
+  
 
   UniqueFd fd_;
   uint32_t mode_id_ = 0;
+ 
 
   std::vector<std::unique_ptr<DrmConnector>> connectors_;
   std::vector<std::unique_ptr<DrmConnector>> writeback_connectors_;
diff --git a/drm/ResourceManager.h b/drm/ResourceManager.h
index 9b4155b..c6bd3b3 100644
--- a/drm/ResourceManager.h
+++ b/drm/ResourceManager.h
@@ -39,6 +39,9 @@ class ResourceManager {
   int getDisplayCount() const {
     return num_displays_;
   }
+  void addDisplayCount()  {
+	num_displays_++;
+  }
   bool ForcedScalingWithGpu() {
     return scale_with_gpu_;
   }
-- 
2.33.0

